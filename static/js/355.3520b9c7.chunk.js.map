{"version":3,"file":"static/js/355.3520b9c7.chunk.js","mappings":"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","sources":["webpack://powerpulse/./src/components/Form/FormField/FormField.module.css?5bb0","components/Form/FormField/FormField.jsx","components/Form/FormField/renderFormField.js","hooks/useShowPassword.js","webpack://powerpulse/./src/pages/AuthPage/AuthPage.module.css?5b0f","webpack://powerpulse/./src/components/Form/AuthForm/AuthForm.module.css?d40a","components/Form/AuthForm/AuthForm.jsx","pages/AuthPage/AuthPage.jsx","utils/shemas/InputShema.jsx","utils/shemas/ShemaForm/Regex.jsx","utils/shemas/ShemaForm/SignInSchema.jsx","utils/shemas/ShemaForm/SignUpSchema.jsx","utils/shemas/ShemaForm/PasswordSchema.js","utils/shemas/ShemaForm/EmailSchema.js","utils/shemas/userFormShemas.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"fieldWrapper\":\"FormField_fieldWrapper__KIXAg\",\"error\":\"FormField_error__wnDNA\",\"success\":\"FormField_success__y+nuE\",\"field\":\"FormField_field__SGWnB\",\"messageWrapper\":\"FormField_messageWrapper__-J9sU\",\"errorMessage\":\"FormField_errorMessage__A9nB5\",\"svgSuccess\":\"FormField_svgSuccess__eH+rK\",\"svgError\":\"FormField_svgError__7bZSD\",\"successMessage\":\"FormField_successMessage__n1ZSt\"};","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Field, ErrorMessage } from \"formik\";\nimport Icon from \"../../ComponIcon/Icon\";\nimport css from \"./FormField.module.css\";\n\nconst FormField = ({\n  fieldName,\n  fieldType,\n  placeholder,\n  formik,\n  successMessage,\n  isPassword,\n}) => (\n  <div\n    className={`${css.fieldWrapper} ${\n      formik.touched[fieldName] && formik.errors[fieldName]\n        ? `${css.error}`\n        : formik.touched[fieldName] && !formik.errors[fieldName]\n        ? `${css.success}`\n        : \"\"\n    }`}\n  >\n    <Field\n      className={css.field}\n      type={fieldType}\n      name={fieldName}\n      placeholder={placeholder}\n    />\n\n    <div className={css.messageWrapper}>\n      <Icon data-status=\"error\" className={css.svgError} iconId={\"icon-red\"} />\n\n      <ErrorMessage\n        className={css.errorMessage}\n        name={fieldName}\n        component=\"div\"\n      />\n    </div>\n\n    {formik.touched[fieldName] && !formik.errors[fieldName] && (\n      <div className={css.messageWrapper}>\n        <Icon\n          data-status=\"success\"\n          className={css.svgSuccess}\n          iconId={\"icon-green\"}\n        />\n        <div className={css.successMessage}>{successMessage}</div>\n      </div>\n    )}\n  </div>\n);\n\n\nexport default FormField;\nFormField.propTypes = {\n  fieldName: PropTypes.string.isRequired,\n  fieldType: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  formik: PropTypes.object.isRequired,\n  successMessage: PropTypes.string.isRequired,\n  isPassword: PropTypes.bool,\n};","import FormField from \"./FormField\";\nimport PropTypes from 'prop-types';\n\nconst renderFormField = (\n  fieldName,\n  fieldType,\n  placeholder,\n  formik,\n  successMessage,\n  isPassword\n) => (\n  <FormField\n    fieldName={fieldName}\n    fieldType={fieldType}\n    placeholder={placeholder}\n    formik={formik}\n    successMessage={successMessage}\n    isPassword={isPassword}\n  />\n);\nexport default renderFormField;\n\n\nrenderFormField.propTypes = {\n  fieldName: PropTypes.string.isRequired,\n  fieldType: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  formik: PropTypes.object.isRequired,\n  successMessage: PropTypes.string.isRequired,\n  isPassword: PropTypes.bool, // optional prop\n};","import  { useCallback, useState } from \"react\";\n\nconst useShowPassword = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const handleClick = useCallback(() => {\n    setShowPassword((prevShowPassword) => !prevShowPassword);\n  }, []);\n  return { showPassword, handleClick };\n};\nexport default useShowPassword;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"AuthPage_title__Lon1J\",\"text\":\"AuthPage_text__39734\",\"textWrapper\":\"AuthPage_textWrapper__qT-PO\",\"textHint\":\"AuthPage_textHint__nlAFj\",\"link\":\"AuthPage_link__HQ0pz\",\"buttonPlay\":\"AuthPage_buttonPlay__9Tizv\",\"textPlay\":\"AuthPage_textPlay__PNI62\",\"iconPlay\":\"AuthPage_iconPlay__nroWt\",\"smallTextPlay\":\"AuthPage_smallTextPlay__e9gV6\",\"boldTextPlay\":\"AuthPage_boldTextPlay__5SXSD\",\"polygon\":\"AuthPage_polygon__CPh2M\",\"runner\":\"AuthPage_runner__dNcTY\",\"calButton\":\"AuthPage_calButton__0Rmsr\",\"calIcon\":\"AuthPage_calIcon__HvVtX\",\"textSvg\":\"AuthPage_textSvg__Zf4Wa\",\"boldText\":\"AuthPage_boldText__gDlsK\",\"smallText\":\"AuthPage_smallText__H53+P\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"AuthForm_form__Fzy2u\",\"formWrapper\":\"AuthForm_formWrapper__i4Npv\",\"messageWrapper\":\"AuthForm_messageWrapper__ZzdVp\",\"buttonEye\":\"AuthForm_buttonEye__sThsg\",\"svgEye\":\"AuthForm_svgEye__9zGoC\",\"link\":\"AuthForm_link__ymY5D\"};","import React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport css from './AuthForm.module.css';\nimport Button from '../../Button/Button';\nimport Icon from '../../ComponIcon/Icon';\nimport renderFormField from '../FormField/renderFormField';\nimport { loginUser, registrationUser } from '../../../redux/auth/authOperation';\nimport { SignUpSchema, SignInSchema } from '../../../utils/shemas';\nimport useAuth from '../../../hooks/useAuth';\nimport { DIARY_ROUTE, PASSWORD_ROUTE, PROFILE_ROUTE } from '../../../utils/const';\nimport useShowPassword from '../../../hooks/useShowPassword';\n\nconst initialValuesSignUp = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst initialValuesSignIn = {\n  email: '',\n  password: '',\n};\n\nconst AuthForm = ({ isSignUp, title }) => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { showPassword, handleClick } = useShowPassword();\n\n  const { isVerify, user } = useAuth();\n\n  const handleSubmitSignUp = ({ name, email, password }, { resetForm }) => {\n    dispatch(registrationUser({ name, email, password }));\n    resetForm();\n  };\n\n  const handleSubmitSignIn = ({ email, password }, { resetForm }) => {\n    dispatch(loginUser({ email, password }));\n    resetForm();\n  };\n\n  const formikRef = useRef();\n  useEffect(() => {\n    if (formikRef.current) {\n      formikRef.current.resetForm();\n    }\n    if (isVerify && !user.profileSettings) {\n      navigate(PROFILE_ROUTE);\n    }\n    if (isVerify && user.profileSettings) {\n      navigate(DIARY_ROUTE);\n    }\n  }, [isSignUp, isVerify, navigate, user]);\n\n  const initialValues = isSignUp ? initialValuesSignUp : initialValuesSignIn;\n  const validationSchema = isSignUp ? SignUpSchema : SignInSchema;\n  const handleSubmit = isSignUp ? handleSubmitSignUp : handleSubmitSignIn;\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n        innerRef={formikRef}\n      >\n        {formik => (\n          <Form className={css.form}>\n            <div className={css.formWrapper}>\n              {isSignUp &&\n                renderFormField('name', 'text', 'Name', formik, 'Success name')}\n              {renderFormField(\n                'email',\n                'email',\n                'Email',\n                formik,\n                'Success email'\n              )}\n              <div style={{ position: 'relative' }}>\n                {renderFormField(\n                  'password',\n                  showPassword ? 'text' : 'password',\n                  'Password',\n                  formik,\n                  'Success password',\n                  true\n                )}\n                {!isSignUp && <Link to={PASSWORD_ROUTE} className={css.link}>Forget your password</Link>}\n                <button\n                  className={css.buttonEye}\n                  type=\"button\"\n                  onClick={handleClick}\n                >\n                  <Icon\n                    className={css.svgEye}\n                    iconId={showPassword ? 'icon-eye' : 'icon-eye-off'}\n                  />\n                </button>\n              </div>\n            </div>\n            <Button text={title} />\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default AuthForm;\n\nAuthForm.propTypes = {\n  isSignUp: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import { Link, useLocation } from \"react-router-dom\";\nimport css from \"./AuthPage.module.css\";\nimport { SIGN_IN_ROUTE, SIGN_UP_ROUTE } from \"../../utils/const\";\nimport AuthForm from \"../../components/Form/AuthForm/AuthForm\";\nimport Logo from \"../../components/Logo/Logo\";\n\nconst AuthPage = () => {\n  const location = useLocation();\n  const isLoginPage = location.pathname === SIGN_UP_ROUTE;\n  const title = isLoginPage ? \"Sign Up\" : \"Sign In\";\n  const titleLink = !isLoginPage ? \"Sign Up\" : \"Sign In\";\n  const link = !isLoginPage ? SIGN_UP_ROUTE : SIGN_IN_ROUTE;\n  const text = !isLoginPage\n    ? \"Welcome! Please enter your credentials to login to the platform:\"\n    : \" Thank you for your interest in our platform. To complete the registration process, please provide us with the following information.\";\n\n  return (\n    <>\n      <Logo />\n      <h1 className={css.title}>{title}</h1>\n      <p className={css.text}>{text}</p>\n      <AuthForm isSignUp={isLoginPage} title={title} />\n      <div className={css.textWrapper}>\n        <p className={css.textHint}>Don’t have an account?</p>\n        <Link className={css.link} to={link}>\n          {titleLink}\n        </Link>\n      </div>\n    </>\n  );\n};\n\nexport default AuthPage;\n","import * as Yup from 'yup';\n\nconst InputShema = Yup.object().shape({\n  amount: Yup.number()\n    .positive('Amount must be a positive number')\n    .required('Amount is required'),\n});\n\nexport default InputShema;\n","export const emailRegex = /^\\w+(-?\\w+)?@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/;\nexport const passwordRegex =\n  /^(?=.*\\d)(?=.*[a-zA-Z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,32}$/;\n","import * as Yup from \"yup\";\nimport { emailRegex, passwordRegex } from \"./Regex\";\n\nconst SignInSchema = Yup.object().shape({\n  email: Yup.string()\n    .matches(emailRegex, \"Invalid email format\")\n    .required(\"Required field\"),\n  password: Yup.string()\n    .matches(passwordRegex, \"Must contain at least 1 capital and 1 digit\")\n    .required(\"Required field\"),\n});\n\n\nexport default SignInSchema;\n","import * as Yup from \"yup\";\nimport { emailRegex, passwordRegex } from \"./Regex\";\n\n\n\nconst SignUpSchema = Yup.object().shape({\n  name: Yup.string().required(\"Required field\"),\n  email: Yup.string()\n    .matches(emailRegex, \"Invalid email format\")\n    .required(\"Required field\"),\n  password: Yup.string()\n    .matches(\n      passwordRegex,\n      \"Must contain 8 characters, at least 1 capital and 1 number.\"\n    )\n    .required(\"Required field\"),\n});\n\nexport default SignUpSchema;\n","import * as Yup from 'yup';\nimport {passwordRegex } from './Regex';\n\n\nexport const PasswordSchema = Yup.object().shape({\n  password: Yup.string()\n    .required('Password is required')\n    .matches(passwordRegex, 'Must contain at least 1 capital and 1 digit'),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Confirm Password is required'),\n});\n\n\nexport default PasswordSchema;\n","import * as Yup from 'yup';\nimport { emailRegex } from './Regex';\n\nconst EmailSchema = Yup.object().shape({\n  email: Yup.string()\n    .matches(emailRegex, 'Invalid email format')\n    .required('Required field'),\n});\n\nexport default EmailSchema;\n","import * as yup from 'yup';\n\nconst eighteenYearsAgo = new Date();\neighteenYearsAgo.setFullYear(eighteenYearsAgo.getFullYear() - 18);\n\nconst userFormShemas = yup.object({\n  name: yup.string().required('Name is required'),\n  height: yup\n    .number('Number')\n    .typeError('Must be a number')\n    .positive('Must be positive.')\n    .min(150, 'Height must be at least 150cm')\n    .max(250, 'Height must be at most 250cm')\n    .required('Height is required'),\n  currentWeight: yup\n    .number()\n    .typeError('Must be a number')\n    .positive('Must be positive.')\n    .min(35, 'Current weight must be at least 35kg')\n    .max(200, 'Current weight must be at most 200kg')\n    .required('Current weight is required'),\n  desiredWeight: yup\n    .number()\n    .typeError('Must be a number')\n    .positive('Must be positive.')\n    .min(35, 'Desired weight must be at least 35kg')\n    .max(200, 'Desired weight must be at most 200kg')\n    .required('Desired weight is required'),\n  birthday: yup\n    .date()\n    .max(eighteenYearsAgo, 'Birthday must be in the past')\n    .min(new Date('1900-01-01'), 'Birthday must be after 1900-01-01')\n    .required('Birthday is required'),\n});\n\nexport default userFormShemas;\n"],"names":["_ref","fieldName","fieldType","placeholder","formik","successMessage","isPassword","_jsxs","className","concat","css","touched","errors","children","_jsx","Field","type","name","Icon","iconId","ErrorMessage","component","FormField","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","handleClick","useCallback","prevShowPassword","initialValuesSignUp","email","password","initialValuesSignIn","isSignUp","title","dispatch","useDispatch","navigate","useNavigate","_useShowPassword","useShowPassword","_useAuth","useAuth","isVerify","user","formikRef","useRef","useEffect","current","resetForm","profileSettings","PROFILE_ROUTE","DIARY_ROUTE","initialValues","validationSchema","SignUpSchema","SignInSchema","handleSubmit","_ref2","_ref3","registrationUser","_ref4","_ref5","loginUser","_Fragment","Formik","onSubmit","innerRef","Form","renderFormField","style","position","Link","to","PASSWORD_ROUTE","onClick","Button","text","isLoginPage","useLocation","pathname","SIGN_UP_ROUTE","titleLink","link","SIGN_IN_ROUTE","Logo","AuthForm","InputShema","Yup","shape","amount","positive","required","emailRegex","passwordRegex","matches","confirmPassword","oneOf","eighteenYearsAgo","Date","setFullYear","getFullYear","userFormShemas","yup","height","typeError","min","max","currentWeight","desiredWeight","birthday"],"sourceRoot":""}