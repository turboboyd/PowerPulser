{"version":3,"file":"static/js/767.6e4f7196.chunk.js","mappings":"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","sources":["webpack://power-pulse-tp/./src/components/Form/FormField/FormField.module.css?5bb0","components/Form/FormField/FormField.jsx","components/Form/FormField/renderFormField.js","hooks/useShowPassword.js","webpack://power-pulse-tp/./src/pages/PasswordPage/PasswordPage.module.css?91ce","webpack://power-pulse-tp/./src/components/Form/PasswordForm/PasswordForm.module.css?0e5f","components/Form/PasswordForm/PasswordForm.js","pages/PasswordPage/PasswordPage.jsx","utils/shemas/ShemaForm/Regex.jsx","utils/shemas/ShemaForm/SignInSchema.jsx","utils/shemas/ShemaForm/SignUpSchema.jsx","utils/shemas/userFormShemas.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"fieldWrapper\":\"FormField_fieldWrapper__KIXAg\",\"error\":\"FormField_error__wnDNA\",\"success\":\"FormField_success__y+nuE\",\"field\":\"FormField_field__SGWnB\",\"messageWrapper\":\"FormField_messageWrapper__-J9sU\",\"errorMessage\":\"FormField_errorMessage__A9nB5\",\"svgSuccess\":\"FormField_svgSuccess__eH+rK\",\"svgError\":\"FormField_svgError__7bZSD\",\"successMessage\":\"FormField_successMessage__n1ZSt\"};","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Field, ErrorMessage } from \"formik\";\nimport Icon from \"../../ComponIcon/Icon\";\nimport css from \"./FormField.module.css\";\n\nconst FormField = ({\n  fieldName,\n  fieldType,\n  placeholder,\n  formik,\n  successMessage,\n  isPassword,\n}) => (\n  <div\n    className={`${css.fieldWrapper} ${\n      formik.touched[fieldName] && formik.errors[fieldName]\n        ? `${css.error}`\n        : formik.touched[fieldName] && !formik.errors[fieldName]\n        ? `${css.success}`\n        : \"\"\n    }`}\n  >\n    <Field\n      className={css.field}\n      type={fieldType}\n      name={fieldName}\n      placeholder={placeholder}\n    />\n\n    <div className={css.messageWrapper}>\n      <Icon data-status=\"error\" className={css.svgError} iconId={\"icon-red\"} />\n\n      <ErrorMessage\n        className={css.errorMessage}\n        name={fieldName}\n        component=\"div\"\n      />\n    </div>\n\n    {formik.touched[fieldName] && !formik.errors[fieldName] && (\n      <div className={css.messageWrapper}>\n        <Icon\n          data-status=\"success\"\n          className={css.svgSuccess}\n          iconId={\"icon-green\"}\n        />\n        <div className={css.successMessage}>{successMessage}</div>\n      </div>\n    )}\n  </div>\n);\n\n\nexport default FormField;\nFormField.propTypes = {\n  fieldName: PropTypes.string.isRequired,\n  fieldType: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  formik: PropTypes.object.isRequired,\n  successMessage: PropTypes.string.isRequired,\n  isPassword: PropTypes.bool,\n};","import FormField from \"./FormField\";\nimport PropTypes from 'prop-types';\n\nconst renderFormField = (\n  fieldName,\n  fieldType,\n  placeholder,\n  formik,\n  successMessage,\n  isPassword\n) => (\n  <FormField\n    fieldName={fieldName}\n    fieldType={fieldType}\n    placeholder={placeholder}\n    formik={formik}\n    successMessage={successMessage}\n    isPassword={isPassword}\n  />\n);\nexport default renderFormField;\n\n\nrenderFormField.propTypes = {\n  fieldName: PropTypes.string.isRequired,\n  fieldType: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  formik: PropTypes.object.isRequired,\n  successMessage: PropTypes.string.isRequired,\n  isPassword: PropTypes.bool, // optional prop\n};","import  { useCallback, useState } from \"react\";\n\nconst useShowPassword = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const handleClick = useCallback(() => {\n    setShowPassword((prevShowPassword) => !prevShowPassword);\n  }, []);\n  return { showPassword, handleClick };\n};\nexport default useShowPassword;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"PasswordPage_title__kpAQj\",\"text\":\"PasswordPage_text__i-63c\",\"textWrapper\":\"PasswordPage_textWrapper__lZeTb\",\"textHint\":\"PasswordPage_textHint__IvJe+\",\"link\":\"PasswordPage_link__QgZEm\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"PasswordForm_form__M6ljP\",\"formWrapper\":\"PasswordForm_formWrapper__xT4dP\",\"svgError\":\"PasswordForm_svgError__1+6q6\",\"buttonEye\":\"PasswordForm_buttonEye__3fmzB\",\"svgEye\":\"PasswordForm_svgEye__7KaKt\"};","import React, { useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport css from './PasswordForm.module.css';\nimport Button from '../../Button/Button';\nimport Icon from '../../ComponIcon/Icon';\nimport renderFormField from '../FormField/renderFormField';\nimport { loginUser, registrationUser } from '../../../redux/auth/authOperation';\nimport { SignUpSchema, SignInSchema } from '../../../utils/shemas';\nimport useAuth from '../../../hooks/useAuth';\nimport { DIARY_ROUTE, PROFILE_ROUTE } from '../../../utils/const';\nimport useShowPassword from '../../../hooks/useShowPassword';\nimport PropTypes from 'prop-types';\n\nconst initialValuesEmail = {\n  email: '',\n};\n\nconst initialValuesPassword = {\n  password: '',\n};\n\nconst PasswordForm = ({ resetPassword, textBtn }) => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { showPassword, handleClick } = useShowPassword();\n\n  const { isVerify, user } = useAuth();\n\n  const handleSubmitEmail = ({ email }, { resetForm }) => {\n    dispatch(registrationUser({ email }));\n    resetForm();\n  };\n\n  const handleSubmitPassword = ({ password }, { resetForm }) => {\n    dispatch(loginUser({ password }));\n    resetForm();\n  };\n\n  const formikRef = useRef();\n  useEffect(() => {\n    if (formikRef.current) {\n      formikRef.current.resetForm();\n    }\n    if (isVerify && !user.profileSettings) {\n      navigate(PROFILE_ROUTE);\n    }\n    if (isVerify && user.profileSettings) {\n      navigate(DIARY_ROUTE);\n    }\n  }, [resetPassword, isVerify, navigate, user]);\n\n  const initialValues = resetPassword\n    ? initialValuesEmail\n    : initialValuesPassword;\n  const validationSchema = resetPassword ? SignUpSchema : SignInSchema;\n  const handleSubmit = resetPassword ? handleSubmitEmail : handleSubmitPassword;\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n        innerRef={formikRef}\n      >\n        {formik => (\n          <Form className={css.form}>\n            <div className={css.formWrapper}>\n              {resetPassword &&\n                renderFormField(\n                  'email',\n                  'email',\n                  'Email',\n                  formik,\n                  'Success email'\n                )}\n              {!resetPassword && (\n                <div style={{ position: 'relative' }}>\n                  {renderFormField(\n                    'password',\n                    showPassword ? 'text' : 'password',\n                    'Password',\n                    formik,\n                    'Success password',\n                    true\n                  )}\n                  <button\n                    className={css.buttonEye}\n                    type=\"button\"\n                    onClick={handleClick}\n                  >\n                    <Icon\n                      className={css.svgEye}\n                      iconId={showPassword ? 'icon-eye' : 'icon-eye-off'}\n                    />\n                  </button>\n                </div>\n              )}\n              {!resetPassword && (\n                <div style={{ position: 'relative' }}>\n                  {renderFormField(\n                    'password',\n                    showPassword ? 'text' : 'password',\n                    'Password',\n                    formik,\n                    'Success password',\n                    true\n                  )}\n                  <button\n                    className={css.buttonEye}\n                    type=\"button\"\n                    onClick={handleClick}\n                  >\n                    <Icon\n                      className={css.svgEye}\n                      iconId={showPassword ? 'icon-eye' : 'icon-eye-off'}\n                    />\n                  </button>\n                </div>\n              )}\n            </div>\n            <Button text={textBtn} />\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default PasswordForm;\n\nPasswordForm.propTypes = {\n  resetPassword: PropTypes.bool,\n  textBtn: PropTypes.string,\n};","import { Link, useLocation } from 'react-router-dom';\nimport css from './PasswordPage.module.css';\nimport { PASSWORD_ROUTE, SIGN_IN_ROUTE} from '../../utils/const';\nimport PasswordForm from '../../components/Form/PasswordForm/PasswordForm';\nimport Logo from '../../components/Logo/Logo';\n\nconst PasswordPage = () => {\n  const location = useLocation();\n  const resetPassword = location.pathname === PASSWORD_ROUTE;\n  const title = resetPassword ? 'Reset Your Password' : 'Create New Password';\n  const text = resetPassword\n    ? `Enter your email and we'll send you a link to reset your password.`\n    : ' Your new password must be different from previous used passwords.';\n    const textBtn = resetPassword ? 'Send' : 'Reset Password';\n\n  return (\n    <>\n      <Logo />\n      <h1 className={css.title}>{title}</h1>\n      <p className={css.text}>{text}</p>\n      <PasswordForm\n        resetPassword={resetPassword}\n        textBtn={textBtn}\n        title={title}\n      />\n      {resetPassword && <div className={css.textWrapper}>\n        <p className={css.textHint}>Back to </p>\n        <Link className={css.link} to={SIGN_IN_ROUTE}>\n          Login\n        </Link>\n      </div>}\n    </>\n  );\n};\n\nexport default PasswordPage;\n","export const emailRegex = /^\\w+(-?\\w+)?@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/;\nexport const passwordRegex =\n  /^(?=.*\\d)(?=.*[a-zA-Z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,32}$/;\n","import * as Yup from \"yup\";\nimport { emailRegex, passwordRegex } from \"./Regex\";\n\nconst SignInSchema = Yup.object().shape({\n  email: Yup.string()\n    .matches(emailRegex, \"Invalid email format\")\n    .required(\"Required field\"),\n  password: Yup.string()\n    .matches(passwordRegex, \"Must contain at least 1 capital and 1 digit\")\n    .required(\"Required field\"),\n});\n\n\nexport default SignInSchema;\n","import * as Yup from \"yup\";\nimport { emailRegex, passwordRegex } from \"./Regex\";\n\n\n\nconst SignUpSchema = Yup.object().shape({\n  name: Yup.string().required(\"Required field\"),\n  email: Yup.string()\n    .matches(emailRegex, \"Invalid email format\")\n    .required(\"Required field\"),\n  password: Yup.string()\n    .matches(\n      passwordRegex,\n      \"Must contain 8 characters, at least 1 capital and 1 number.\"\n    )\n    .required(\"Required field\"),\n});\n\nexport default SignUpSchema;\n","import * as yup from \"yup\";\n\nconst userFormShemas = yup.object({\n  name: yup.string().required(\"Name is required\"),\n  height: yup\n    .number(\"Number\")\n    .typeError(\"Must be a number\")\n    .positive(\"Must be positive.\")\n    .min(150, \"Height must be at least 150cm\")\n    .required(\"Height is required\"),\n  currentWeight: yup\n    .number()\n    .typeError(\"Must be a number\")\n    .positive(\"Must be positive.\")\n    .min(35, \"Current weight must be at least 35kg\")\n    .required(\"Current weight is required\"),\n  desiredWeight: yup\n    .number()\n    .typeError(\"Must be a number\")\n    .positive(\"Must be positive.\")\n    .min(35, \"Desired weight must be at least 35kg\")\n    .required(\"Desired weight is required\"),\n  birthday: yup\n    .date()\n    .max(new Date(), \"Birthday must be in the past\")\n    .min(new Date(\"1900-01-01\"), \"Birthday must be after 1900-01-01\")\n    .required(\"Birthday is required\"),\n});\n\nexport default userFormShemas;\n"],"names":["_ref","fieldName","fieldType","placeholder","formik","successMessage","isPassword","_jsxs","className","concat","css","touched","errors","children","_jsx","Field","type","name","Icon","iconId","ErrorMessage","component","FormField","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","handleClick","useCallback","prevShowPassword","initialValuesEmail","email","initialValuesPassword","password","resetPassword","textBtn","dispatch","useDispatch","navigate","useNavigate","_useShowPassword","useShowPassword","_useAuth","useAuth","isVerify","user","formikRef","useRef","useEffect","current","resetForm","profileSettings","PROFILE_ROUTE","DIARY_ROUTE","initialValues","validationSchema","SignUpSchema","SignInSchema","handleSubmit","_ref2","_ref3","registrationUser","_ref4","_ref5","loginUser","_Fragment","Formik","onSubmit","innerRef","Form","renderFormField","style","position","onClick","Button","text","useLocation","pathname","PASSWORD_ROUTE","title","Logo","PasswordForm","Link","to","SIGN_IN_ROUTE","emailRegex","passwordRegex","Yup","shape","matches","required","userFormShemas","yup","height","typeError","positive","min","currentWeight","desiredWeight","birthday","max","Date"],"sourceRoot":""}