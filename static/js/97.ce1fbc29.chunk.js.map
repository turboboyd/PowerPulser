{"version":3,"file":"static/js/97.ce1fbc29.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/pages/AuthPage/AuthPage.module.css?5b0f","webpack://react-homework-template/./src/components/Form/AuthForm/AuthForm.module.css?d40a","webpack://react-homework-template/./src/components/Form/FormField/FormField.module.css?5bb0","components/Form/FormField/FormField.jsx","components/Form/FormField/renderFormField.js","utils/shemas/ShemaForm/Regex.jsx","utils/shemas/ShemaForm/SignInSchema.jsx","utils/shemas/ShemaForm/SignUpSchema.jsx","hooks/useShowPassword.js","components/Form/AuthForm/AuthForm.jsx","pages/AuthPage/AuthPage.jsx","utils/shemas/userFormShemas.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"AuthPage_section__RGWYc\",\"title\":\"AuthPage_title__Lon1J\",\"text\":\"AuthPage_text__39734\",\"textWrapper\":\"AuthPage_textWrapper__qT-PO\",\"textHint\":\"AuthPage_textHint__nlAFj\",\"link\":\"AuthPage_link__HQ0pz\",\"buttonPlay\":\"AuthPage_buttonPlay__9Tizv\",\"textPlay\":\"AuthPage_textPlay__PNI62\",\"iconPlay\":\"AuthPage_iconPlay__nroWt\",\"smallTextPlay\":\"AuthPage_smallTextPlay__e9gV6\",\"boldTextPlay\":\"AuthPage_boldTextPlay__5SXSD\",\"polygon\":\"AuthPage_polygon__CPh2M\",\"runner\":\"AuthPage_runner__dNcTY\",\"calButton\":\"AuthPage_calButton__0Rmsr\",\"calIcon\":\"AuthPage_calIcon__HvVtX\",\"textSvg\":\"AuthPage_textSvg__Zf4Wa\",\"boldText\":\"AuthPage_boldText__gDlsK\",\"smallText\":\"AuthPage_smallText__H53+P\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"AuthForm_form__Fzy2u\",\"formWrapper\":\"AuthForm_formWrapper__i4Npv\",\"fieldWrapper\":\"AuthForm_fieldWrapper__AiZpL\",\"error\":\"AuthForm_error__JoOFZ\",\"success\":\"AuthForm_success__N5ART\",\"field\":\"AuthForm_field__epY01\",\"messageWrapper\":\"AuthForm_messageWrapper__ZzdVp\",\"svgError\":\"AuthForm_svgError__Xa2Zn\",\"svgSuccess\":\"AuthForm_svgSuccess__CjVCp\",\"errorMessage\":\"AuthForm_errorMessage__J4wUN\",\"successMessage\":\"AuthForm_successMessage__C+N8q\",\"buttonEye\":\"AuthForm_buttonEye__sThsg\",\"svgEye\":\"AuthForm_svgEye__9zGoC\"};","// extracted by mini-css-extract-plugin\nexport default {\"fieldWrapper\":\"FormField_fieldWrapper__KIXAg\",\"error\":\"FormField_error__wnDNA\",\"success\":\"FormField_success__y+nuE\",\"field\":\"FormField_field__SGWnB\",\"messageWrapper\":\"FormField_messageWrapper__-J9sU\",\"errorMessage\":\"FormField_errorMessage__A9nB5\",\"svgSuccess\":\"FormField_svgSuccess__eH+rK\",\"svgError\":\"FormField_svgError__7bZSD\",\"successMessage\":\"FormField_successMessage__n1ZSt\"};","import React from \"react\";\nimport { Field, ErrorMessage } from \"formik\";\nimport Icon from \"../../ComponIcon/Icon\";\nimport css from \"./FormField.module.css\";\n\nconst FormField = ({\n  fieldName,\n  fieldType,\n  placeholder,\n  formik,\n  successMessage,\n  isPassword,\n}) => (\n  <div\n    className={`${css.fieldWrapper} ${\n      formik.touched[fieldName] && formik.errors[fieldName]\n        ? `${css.error}`\n        : formik.touched[fieldName] && !formik.errors[fieldName]\n        ? `${css.success}`\n        : \"\"\n    }`}\n  >\n    <Field\n      className={css.field}\n      type={fieldType}\n      name={fieldName}\n      placeholder={placeholder}\n    />\n\n    <div className={css.messageWrapper}>\n      <Icon data-status=\"error\" className={css.svgError} iconId={\"icon-red\"} />\n\n      <ErrorMessage\n        className={css.errorMessage}\n        name={fieldName}\n        component=\"div\"\n      />\n    </div>\n\n    {formik.touched[fieldName] && !formik.errors[fieldName] && (\n      <div className={css.messageWrapper}>\n        <Icon\n          data-status=\"success\"\n          className={css.svgSuccess}\n          iconId={\"icon-green\"}\n        />\n        <div className={css.successMessage}>{successMessage}</div>\n      </div>\n    )}\n  </div>\n);\n\n\nexport default FormField;\n","import FormField from \"./FormField\";\n\nconst renderFormField = (\n  fieldName,\n  fieldType,\n  placeholder,\n  formik,\n  successMessage,\n  isPassword\n) => (\n  <FormField\n    fieldName={fieldName}\n    fieldType={fieldType}\n    placeholder={placeholder}\n    formik={formik}\n    successMessage={successMessage}\n    isPassword={isPassword}\n  />\n);\nexport default renderFormField;\n","export const emailRegex = /^\\w+(-?\\w+)?@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/;\nexport const passwordRegex =\n  /^(?=.*\\d)(?=.*[a-zA-Z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,32}$/;\n","import * as Yup from \"yup\";\nimport { emailRegex, passwordRegex } from \"./Regex\";\n\nconst SignInSchema = Yup.object().shape({\n  email: Yup.string()\n    .matches(emailRegex, \"Invalid email format\")\n    .required(\"Required field\"),\n  password: Yup.string()\n    .matches(passwordRegex, \"Must contain at least 1 capital and 1 digit\")\n    .required(\"Required field\"),\n});\n\n\nexport default SignInSchema;\n","import * as Yup from \"yup\";\nimport { emailRegex, passwordRegex } from \"./Regex\";\n\n\n\nconst SignUpSchema = Yup.object().shape({\n  name: Yup.string().required(\"Required field\"),\n  email: Yup.string()\n    .matches(emailRegex, \"Invalid email format\")\n    .required(\"Required field\"),\n  password: Yup.string()\n    .matches(\n      passwordRegex,\n      \"Must contain 8 characters, at least 1 capital and 1 number.\"\n    )\n    .required(\"Required field\"),\n});\n\nexport default SignUpSchema;\n","import  { useCallback, useState } from \"react\";\n\nconst useShowPassword = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const handleClick = useCallback(() => {\n    setShowPassword((prevShowPassword) => !prevShowPassword);\n  }, []);\n  return { showPassword, handleClick };\n};\nexport default useShowPassword;\n","import React, { useEffect, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { Formik, Form } from \"formik\";\nimport css from \"./AuthForm.module.css\";\nimport Button from \"../../Button/Button\";\nimport Icon from \"../../ComponIcon/Icon\";\nimport renderFormField from \"../FormField/renderFormField\";\nimport { loginUser, registrationUser } from \"../../../redux/auth/authOperation\";\nimport { SignUpSchema, SignInSchema } from \"../../../utils/shemas\";\nimport useAuth from \"../../../hooks/useAuth\";\nimport { DIARY_ROUTE, PROFILE_ROUTE } from \"../../../utils/const\";\nimport useShowPassword from \"../../../hooks/useShowPassword\";\n\n\nconst initialValuesSignUp = {\n  name: \"\",\n  email: \"\",\n  password: \"\",\n};\n\nconst initialValuesSignIn = {\n  email: \"\",\n  password: \"\",\n};\n\nconst AuthForm = ({ isSignUp, title }) => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { showPassword, handleClick } = useShowPassword();\n\n  const { isVerify, user } = useAuth();\n\n  const handleSubmitSignUp = ({ name, email, password }, { resetForm }) => {\n    dispatch(registrationUser({ name, email, password }));\n    resetForm();\n  };\n\n  const handleSubmitSignIn = ({ email, password }, { resetForm }) => {\n    dispatch(loginUser({ email, password }));\n    resetForm();\n  };\n\n  const formikRef = useRef();\n  useEffect(() => {\n    if (formikRef.current) {\n      formikRef.current.resetForm();\n    }\n    if (isVerify && !user.profileSettings) {\n      navigate(PROFILE_ROUTE);\n    }\n    if (isVerify && user.profileSettings) {\n      navigate(DIARY_ROUTE);\n    }\n  }, [isSignUp, isVerify, navigate, user]);\n\n  const initialValues = isSignUp ? initialValuesSignUp : initialValuesSignIn;\n  const validationSchema = isSignUp ? SignUpSchema : SignInSchema;\n  const handleSubmit = isSignUp ? handleSubmitSignUp : handleSubmitSignIn;\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n        innerRef={formikRef}\n      >\n        {(formik) => (\n          <Form className={css.form}>\n            <div className={css.formWrapper}>\n              {isSignUp &&\n                renderFormField(\"name\", \"text\", \"Name\", formik, \"Success name\")}\n              {renderFormField(\n                \"email\",\n                \"email\",\n                \"Email\",\n                formik,\n                \"Success email\"\n              )}\n              <div style={{ position: \"relative\" }}>\n                {renderFormField(\n                  \"password\",\n                  showPassword ? \"text\" : \"password\",\n                  \"Password\",\n                  formik,\n                  \"Success password\",\n                  true\n                )}\n                <button\n                  className={css.buttonEye}\n                  type=\"button\"\n                  onClick={handleClick}\n                >\n                  <Icon\n                    className={css.svgEye}\n                    iconId={showPassword ? \"icon-eye\" : \"icon-eye-off\"}\n                  />\n                </button>\n              </div>\n            </div>\n            <Button text={title} />\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default AuthForm;\n","import { Link, useLocation } from \"react-router-dom\";\nimport css from \"./AuthPage.module.css\";\nimport { SIGN_IN_ROUTE, SIGN_UP_ROUTE } from \"../../utils/const\";\nimport AuthForm from \"../../components/Form/AuthForm/AuthForm\";\nimport Logo from \"../../components/Logo/Logo\";\n\nconst AuthPage = () => {\n  const location = useLocation();\n  const isLoginPage = location.pathname === SIGN_UP_ROUTE;\n  const title = isLoginPage ? \"Sign Up\" : \"Sign In\";\n  const titleLink = !isLoginPage ? \"Sign Up\" : \"Sign In\";\n  const link = !isLoginPage ? SIGN_UP_ROUTE : SIGN_IN_ROUTE;\n  const text = !isLoginPage\n    ? \"Welcome! Please enter your credentials to login to the platform:\"\n    : \" Thank you for your interest in our platform. To complete the registration process, please provide us with the following information.\";\n\n  return (\n    <>\n      <Logo />\n      <h1 className={css.title}>{title}</h1>\n      <p className={css.text}>{text}</p>\n      <AuthForm isSignUp={isLoginPage} title={title} />\n      <div className={css.textWrapper}>\n        <p className={css.textHint}>Don’t have an account?</p>\n        <Link className={css.link} to={link}>\n          {titleLink}\n        </Link>\n      </div>\n    </>\n  );\n};\n\nexport default AuthPage;\n","import * as yup from \"yup\";\n\nconst userFormShemas = yup.object({\n  name: yup.string().required(\"Name is required\"),\n  height: yup\n    .number(\"Number\")\n    .typeError(\"Must be a number\")\n    .positive(\"Must be positive.\")\n    .min(150, \"Height must be at least 150cm\")\n    .required(\"Height is required\"),\n  currentWeight: yup\n    .number()\n    .typeError(\"Must be a number\")\n    .positive(\"Must be positive.\")\n    .min(35, \"Current weight must be at least 35kg\")\n    .required(\"Current weight is required\"),\n  desiredWeight: yup\n    .number()\n    .typeError(\"Must be a number\")\n    .positive(\"Must be positive.\")\n    .min(35, \"Desired weight must be at least 35kg\")\n    .required(\"Desired weight is required\"),\n  birthday: yup\n    .date()\n    .max(new Date(), \"Birthday must be in the past\")\n    .min(new Date(\"1900-01-01\"), \"Birthday must be after 1900-01-01\")\n    .required(\"Birthday is required\"),\n});\n\nexport default userFormShemas;\n"],"names":["_ref","fieldName","fieldType","placeholder","formik","successMessage","isPassword","_jsxs","className","concat","css","touched","errors","children","_jsx","Field","type","name","Icon","iconId","ErrorMessage","component","FormField","emailRegex","passwordRegex","Yup","shape","email","matches","required","password","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","handleClick","useCallback","prevShowPassword","initialValuesSignUp","initialValuesSignIn","isSignUp","title","dispatch","useDispatch","navigate","useNavigate","_useShowPassword","useShowPassword","_useAuth","useAuth","isVerify","user","formikRef","useRef","useEffect","current","resetForm","profileSettings","PROFILE_ROUTE","DIARY_ROUTE","initialValues","validationSchema","SignUpSchema","SignInSchema","handleSubmit","_ref2","_ref3","registrationUser","_ref4","_ref5","loginUser","_Fragment","Formik","onSubmit","innerRef","Form","renderFormField","style","position","onClick","Button","text","isLoginPage","useLocation","pathname","SIGN_UP_ROUTE","titleLink","link","SIGN_IN_ROUTE","Logo","AuthForm","Link","to","userFormShemas","yup","height","typeError","positive","min","currentWeight","desiredWeight","birthday","max","Date"],"sourceRoot":""}